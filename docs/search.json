[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "powerpulse",
    "section": "",
    "text": "Out of balance\n\n\n\n\n\n\n\nimbalance\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 25, 2023\n\n\nJakob Prossliner\n\n\n\n\n\n\n  \n\n\n\n\nOptimisation\n\n\n\n\n\n\n\noptimisation\n\n\n\n\n\n\n\n\n\n\n\nNov 25, 2023\n\n\nJakob Prossliner\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/optimisation/index.html",
    "href": "posts/optimisation/index.html",
    "title": "Optimisation",
    "section": "",
    "text": "First we download some price data, here I use Austrian price data for the month of November 2023. The main idea and structure of the code comes from the book “Virtual Power Plants and Electricity Markets” from Springer. Various power plant types are being optimised in the book, however it is not trivial to translate the code therein (written in GAMS which is not open source) to julia.\nIn this example we work with a thermal plant which has several parameters:\n\nprices: a vector of prices we feed to the model\nvariable cost: in our example we work with fixed variable cost, in a future project we might want to look at having a vector of variable costs, some kind of conversion of ttf, eua and powerplant efficiency to mwh.\nstartup_cost: cost incurred by the plant when it is switched on\nshutdown_cost: cost of shutting down\nmin_tech: minimal non zero production possibile (we don’t want the powerplant to produce tiny amounts of power\nfor many powerplants this is not even possible, in addition we don’t want the powerplant to artificially avoid startup or shutdown costs by producing tiny amounts of power)\nramping_up: possible ramping upwards\nramping_down: possible down ramping\nstartup_ramping: possible ramping when switching on (this should not be smaller than min_tech)\nshutdown_ramping: possible ramping when shutting down (also shouldn’t be smaller than min_tech)\n\nCollapse to see function we are running\n\n\nCode\n\n#| eval: false\n\nusing GLPK\nusing JuMP\nusing CSV\nusing DataFrames\n\nfunction thermalplant(prices, variable_cost, startup_cost, shutdown_cost, min_tech, ramping_up, ramping_down, startup_ramping, shutdown_ramping)\n\n    n = length(prices)\n\n    model = Model(GLPK.Optimizer)\n\n    @variable(model, running[1:n], Bin)\n    @variable(model, p[1:n] >= 0)\n\n    # seems to work\n    for i in 1:n\n        @constraint(model, p[i] <= capacity * running[i]) \n        @constraint(model, p[i] >= min_tech * running[i])\n    end\n\n    @variable(model, startup[1:n], Bin)\n    @variable(model, shutdown[1:n], Bin)\n\n    for i in 2:n\n        # 0 if running; -1 if shutdown, 1 if swich on\n        @constraint(model, running[i] - running[i - 1] == startup[i] - shutdown[i])\n        @constraint(model, startup[i] + shutdown[i] <= 1)\n\n        @constraint(model, p[i] - p[i - 1] <= (ramping_up * running[i - 1]) + (startup_ramping * startup[i]))\n        @constraint(model, p[i - 1] - p[i] <= (ramping_down * running[i - 1]) + (shutdown_ramping * shutdown[i]))\n\n    end\n\n    @objective(\n        model, Max,\n        sum(\n            (prices[i] * p[i]) - (variable_cost * p[i]) - (startup_cost * startup[i]) - (shutdown_cost * shutdown[i])\n            for i in 1:n\n        )\n    )\n\n    optimize!(model)\n\n    return value.(p)\n\nend\n\n\nthermalplant (generic function with 1 method)\n\n\nCode\n\n\n#capacity = 10\n#variable_cost = 130\n#startup_cost = 4000\n#shutdown_cost = 3000\n#min_tech      = 3\n#ramping_up = 0.3\n#ramping_down = 0.4\n#startup_ramping = 3.3\n#shutdown_ramping = 3.4\n#\n#\n#prices_df = CSV.read(\"./data/aus15minprices.csv\", DataFrame)\n#prices_df = rename!(prices_df, [:date, :price])\n#\n#plant1 = thermalplant(\n#  prices_df.price,\n#  130,\n#  4000,\n#  3000,\n#  3,\n#  1,\n#  1,\n#  4,\n#  4\n#)\n#\n\n\nWe create some possible values for the power plant and run the simulation, however we’re going to call the function via python, to make it easier\n\n\nCode\nimport julia\nfrom julia import Main\nimport os\nimport pandas as pd\n\nos.getcwd()\nMain.include(\"termalplant.jl\")\n\nprices = pd.read_csv(\"./posts/optimisation/data/aus15minprices.csv\")\nprices.columns = ['date', 'price']\n\n\ncapacity = 10\nvariable_cost = 90\nstartup_cost = 4000\nshutdown_cost = 3000\nmin_tech      = 3\nramping_up = 0.3\nramping_down = 0.4\nstartup_ramping = 3.3\nshutdown_ramping = 3.4\n\nprice_list = prices['price'].tolist()\n\nsimul1 = Main.thermalplant(\n    price_list,\n    capacity,\n    variable_cost,\n    startup_cost,\n    shutdown_cost,\n    min_tech,\n    ramping_up,\n    ramping_down,\n    startup_ramping,\n    shutdown_ramping\n    )\n\nprices[\"simul1\"] = simu1\n\n# lets keep all as it was and just alter the min tech downwards to 2 MW\n\nsimul2 = Main.thermalplant(\n    price_list,\n    10, #capacity\n    90, #variable_cost\n    4000, #startup_cost\n    3000, #shutdown_cost\n    2, #min_tech\n    0.3, #ramping_up\n    0.4, #ramping_down\n    3.3, #startup_ramping \n    3.4, #shutdown_ramping\n    )\n\nprices[\"simul2\"] = simul2\n\n# lets have much higher ramping\n\nsimul3 = Main.thermalplant(\n    price_list,\n    10, #capacity\n    90, #variable_cost\n    4000, #startup_cost\n    3000, #shutdown_cost\n    3, #min_tech\n    2, #ramping_up\n    2, #ramping_down\n    3.3, #startup_ramping \n    3.4, #shutdown_ramping\n    )\n\nprices[\"simul3\"] = simul3\n\nprices.to_csv(\"./data/simuls.csv\")\n\n\n\n\nAs specified in the code above we have 3 simulations:\n\nsimul1 is our baseline,\nsimul2 has a lower min_tech value\nsimul3 has the ability to ramp more\n\nLet’s visualise the optimisation results.\n\n\nCode\nlibrary(tidyverse)\nlibrary(timetk)\n\ndata <- read_csv(\"./data/simuls.csv\") %>% \n  select(-1)\n\n\ndata %>%\n  pivot_longer(-date) %>% \n  mutate(type = if_else(name == \"price\", \"price\", \"simul\")) %>% \n  group_by(type) %>% \n  timetk::plot_time_series(\n  date, value, name, .smooth = FALSE, .title = \"Quarthourly Austrian day ahead prices (ENTSO-E)\"\n)"
  }
]